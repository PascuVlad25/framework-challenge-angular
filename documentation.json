{
    "pipes": [],
    "interfaces": [
        {
            "name": "TodoGroup",
            "id": "interface-TodoGroup-54e19f1af2382b16f8bfb0bd000662404dd8752d1ab0b9bedfaf6cf4a209aa791fea5a5b94d700c253bee3973565c36347945e00e04d48d9e9428bb535c9cd9b",
            "file": "src/app/components/todo/models/todo-group.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Todo } from \".\";\r\n\r\nexport interface TodoGroup {\r\n    title: string;\r\n    filter: (todo: Todo) => boolean;\r\n    todos: Todo[];\r\n}\r\n",
            "properties": [
                {
                    "name": "filter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "todos",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Todo[]",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "GameService",
            "id": "injectable-GameService-099359868cd2c74e590436bd4a42f71f4d976888e14e3516872846405a9f28481dfddcadb2dc2df9b027f9a924961a687e7aafc073a6f31099580aa65557aded",
            "file": "src/app/services/game.service.ts",
            "properties": [
                {
                    "name": "gameMode",
                    "defaultValue": "GameMode.NotSelected",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GameMode",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "gameStatus$",
                    "defaultValue": "new BehaviorSubject<GameStatus>(GameStatus.NotStarted)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<GameStatus>",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getGameMode",
                    "args": [],
                    "optional": false,
                    "returnType": "GameMode",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "setGameMode",
                    "args": [
                        {
                            "name": "gameMode",
                            "type": "GameMode",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "gameMode",
                            "type": "GameMode",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "startGame",
                    "args": [
                        {
                            "name": "gameMode",
                            "type": "GameMode",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "gameMode",
                            "type": "GameMode",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from \"@angular/core\";\r\nimport { BehaviorSubject } from \"rxjs\";\r\nimport { GameMode, GameStatus } from \"src/app/components\";\r\n\r\n@Injectable()\r\nexport class GameService {\r\n    public gameStatus$: BehaviorSubject<GameStatus> = new BehaviorSubject<GameStatus>(GameStatus.NotStarted);\r\n\r\n    private gameMode: GameMode = GameMode.NotSelected;\r\n\r\n    public startGame(gameMode: GameMode): void {\r\n        this.gameStatus$.next(GameStatus.Ongoing);\r\n        this.gameMode = gameMode;\r\n    }\r\n\r\n    public getGameMode(): GameMode {\r\n        return this.gameMode;\r\n    }\r\n\r\n    public setGameMode(gameMode: GameMode): void {\r\n        this.gameMode = gameMode;\r\n    }\r\n}",
            "type": "injectable"
        },
        {
            "name": "PageChangerService",
            "id": "injectable-PageChangerService-17ccc6242b9b581304ae4a3da930a41b7271b68aaa6a93d31c7c832ff8bedcd5bc45d89fd63e21801eae6fe197d53f67ed70f4ff89a07e728148885bef0921da",
            "file": "src/app/services/page-changer.service.ts",
            "properties": [
                {
                    "name": "currentPageIndex$",
                    "defaultValue": "new BehaviorSubject<number>(0)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "maxPage",
                    "defaultValue": "3",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "isAvailableNext",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "isAvailablePrevious",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "nextPage",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "previousPage",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PageChangerService {\n  public currentPageIndex$ = new BehaviorSubject<number>(0);\n  private maxPage = 3;\n\n  constructor() { }\n  \n  public isAvailableNext(): boolean {\n    return this.currentPageIndex$.value < this.maxPage;\n  }\n\n  public isAvailablePrevious(): boolean {\n    return this.currentPageIndex$.value > 0;\n  }\n\n  public nextPage(): void {\n    if(this.isAvailableNext()) {\n      const newValue = this.currentPageIndex$.value + 1;\n      this.currentPageIndex$.next(newValue);\n    }\n  }\n\n  public previousPage(): void {\n    if(this.isAvailablePrevious()) {      \n      const newValue = this.currentPageIndex$.value - 1;\n      this.currentPageIndex$.next(newValue);\n    }\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 9
            },
            "type": "injectable"
        },
        {
            "name": "ThemeService",
            "id": "injectable-ThemeService-c8a957a9a6ed30bb793372e573da41eb1c771f65edbbd26cfebd340ff36d299a99cef3f9e3a6571e41385aae8274520b04c35329d810bb1d38986a3d8f423e76",
            "file": "src/app/services/theme.service.ts",
            "properties": [
                {
                    "name": "currentTheme$",
                    "defaultValue": "new BehaviorSubject<Theme>(Theme.Light)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<Theme>",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "addClassToBody",
                    "args": [
                        {
                            "name": "theme",
                            "type": "Theme",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "theme",
                            "type": "Theme",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "init",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "toggleTheme",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from \"@angular/core\";\r\nimport { BehaviorSubject } from \"rxjs\";\r\nimport { Theme } from \"./enums\";\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class ThemeService {\r\n    public currentTheme$: BehaviorSubject<Theme> = new BehaviorSubject<Theme>(Theme.Light);\r\n\r\n    public toggleTheme(): void {\r\n        if(this.currentTheme$.getValue() === Theme.Light) {\r\n            this.currentTheme$.next(Theme.Dark);\r\n        } else {\r\n            this.currentTheme$.next(Theme.Light);\r\n        }\r\n        this.addClassToBody(this.currentTheme$.getValue());\r\n    }\r\n\r\n    public init(): void {\r\n        this.addClassToBody(this.currentTheme$.getValue());\r\n    }\r\n\r\n    private addClassToBody(theme: Theme): void {\r\n        const bodyTag = document.body;\r\n        const classToBeRemoved = theme === Theme.Light ? Theme.Dark : Theme.Light;\r\n        bodyTag.classList.remove(classToBeRemoved);\r\n        bodyTag.classList.add(theme);\r\n    }\r\n}",
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [
        {
            "name": "Todo",
            "id": "class-Todo-9c61dc73a497e511858aedc5819f2405002a9b49158de887692fa08261f7175dd52bc69124d725d02daf9d989279ef579c4c78f953efe9a306bc6cfef33a57d0",
            "file": "src/app/components/todo/models/todo.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class Todo {\r\n    public title: string;\r\n    public description: string;\r\n    public deadline: Date;\r\n    public completed: boolean;\r\n    public color: string;\r\n\r\n    constructor(title: string, description: string, deadline: Date, color: string) {\r\n        this.title = title;\r\n        this.description = description;\r\n        this.deadline = deadline;\r\n        this.completed = false;\r\n        this.color = color;\r\n    }\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "title",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "description",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "deadline",
                        "type": "Date",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "color",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 6,
                "jsdoctags": [
                    {
                        "name": "title",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "description",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "deadline",
                        "type": "Date",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "color",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "completed",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "deadline",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [],
    "components": [
        {
            "name": "AnimationDemoComponent",
            "id": "component-AnimationDemoComponent-e0f59345921d808053a7d3e06d8105083669831ecae7009149200a955d377e00abe7975a33c05c4645dec4462b2195503c9699c845e3ad1cdc65218906d32108",
            "file": "src/app/components/animation-demo/animation-demo.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-animation-demo",
            "styleUrls": [
                "./animation-demo.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./animation-demo.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "dizzyEmoji",
                    "defaultValue": "faDizzy",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "heartEmoji",
                    "defaultValue": "faGrinHearts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "isDark",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "isDestroyed$",
                    "defaultValue": "new Subject<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<void>",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "laughEmoji",
                    "defaultValue": "faLaughBeam",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "starsEmoji",
                    "defaultValue": "faGrinStars",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "tongueEmoji",
                    "defaultValue": "faGrinTongue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "winkEmoji",
                    "defaultValue": "faSmileWink",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "subscribeToTheme",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { faSmileWink, faGrinStars, faLaughBeam, faGrinHearts, faGrinTongue, faDizzy } from '@fortawesome/free-regular-svg-icons';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { ThemeService } from 'src/app/services';\nimport { Theme } from 'src/app/services/enums';\n\n@Component({\n  selector: 'app-animation-demo',\n  templateUrl: './animation-demo.component.html',\n  styleUrls: ['./animation-demo.component.scss']\n})\nexport class AnimationDemoComponent implements OnInit, OnDestroy {\n  public winkEmoji = faSmileWink;\n  public starsEmoji = faGrinStars;\n  public laughEmoji = faLaughBeam;\n  public heartEmoji = faGrinHearts;\n  public tongueEmoji = faGrinTongue;\n  public dizzyEmoji = faDizzy;\n\n  public isDark = false;\n  private isDestroyed$: Subject<void> = new Subject<void>();\n\n  constructor(private themeService: ThemeService) { }\n\n  public ngOnInit(): void {\n    this.subscribeToTheme();\n  }\n\n  private subscribeToTheme(): void {\n    this.themeService.currentTheme$.pipe(\n      takeUntil(this.isDestroyed$)\n      ).subscribe((theme) => {\n      this.isDark = theme === Theme.Dark;\n    });\n  }\n\n  public ngOnDestroy(): void {\n    this.isDestroyed$.next();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import 'src/styles';\r\n$laptop-width: 500px;\r\n$laptop-height: 288px;\r\n$laptop-top-border: 16px;\r\n$phone-width: 200px;\r\n$phone-height: 402px;\r\n$phone-top-border: 10px;\r\n\r\n:host {\r\n  --screen-height: 240px;\r\n  --screen-width: 384px;\r\n  --device-width: #{$laptop-width};\r\n  --device-height: #{$laptop-height};\r\n  --device-top-border: #{$laptop-top-border};\r\n  --screen-carousel-offset: calc(-2 * var(--screen-width));\r\n\r\n  font-family: 'Fira Sans', sans-serif;\r\n  background-color: var(--background-color);\r\n  color: var(--font-color);\r\n\r\n    .container {\r\n      height: 100vh;\r\n      width: 100vw;\r\n      display: flex;\r\n      align-items: center;\r\n      justify-content: center;\r\n      position: relative;\r\n      overflow: hidden;\r\n\r\n      .animation-header {\r\n        position: absolute;\r\n        top: 30px;\r\n        left: 30px;\r\n        display: flex;\r\n        align-items: center;\r\n\r\n        .title {\r\n          font-size: 32px;\r\n          font-weight: 600;\r\n          margin-right: 15px;\r\n        }\r\n      }\r\n\r\n      .animation-container {\r\n          height: var(--screen-height);\r\n          width: var(--screen-width);\r\n          position: relative;\r\n\r\n          .frame {\r\n              position: absolute;\r\n              z-index: 2;\r\n              top: calc(0px - var(--device-top-border));\r\n              left: calc((var(--device-width) - var(--screen-width)) / -2);\r\n              height: var(--device-height);\r\n              width: var(--device-width);\r\n              background-image: url('~src/assets/images/macbook-frame.png');\r\n              background-repeat: no-repeat;\r\n\r\n              &.dark {\r\n                background-image: url('~src/assets/images/macbook-frame-dark.png');\r\n              }\r\n\r\n              @media (max-width: $mobile) {\r\n                background-image: url('~src/assets/images/iphone-frame-light.png');\r\n\r\n                &.dark {\r\n                  background-image: url('~src/assets/images/iphone-frame-dark.png');\r\n                }\r\n              } \r\n          }\r\n\r\n          .screens-container {\r\n              top: 0;\r\n              left: 0;\r\n              position: absolute;\r\n              z-index: 1;\r\n              display: flex;\r\n              transform: translateX(var(--screen-carousel-offset));\r\n              animation: slide 6s infinite;\r\n\r\n              .screen {\r\n                  height: var(--screen-height);\r\n                  width: var(--screen-width);\r\n                  display: flex;\r\n                  justify-content: center;\r\n                  align-items: center;\r\n                  color: white;\r\n                  font-size: 24px;\r\n                  animation: scale 3s infinite cubic-bezier(0,1,1,1);\r\n\r\n                  fa-icon {\r\n                    font-size: 50px;\r\n                    color: rgba(0, 0, 0, 0.3);\r\n                    mix-blend-mode: multiply;\r\n                  }\r\n\r\n                  &.screen-1 {\r\n                      background: $gradient-1;\r\n                  }\r\n\r\n                  &.screen-2 {\r\n                      background: $gradient-2;\r\n                  }\r\n\r\n                  &.screen-3 {\r\n                      background: $gradient-3;\r\n                  }\r\n\r\n                  &.screen-4 {\r\n                      background: $gradient-4;\r\n                  }\r\n\r\n                  &.screen-5 {\r\n                      background: $gradient-5;\r\n                  }\r\n              }\r\n          }\r\n      }\r\n  }\r\n  \r\n  @media (max-width: $mobile) {\r\n    --screen-height: 384px;\r\n    --screen-width: 175px;\r\n    --device-width: #{$phone-width};\r\n    --device-height: #{$phone-height};\r\n    --device-top-border: #{$phone-top-border};\r\n  } \r\n}\r\n\r\n@keyframes slide {\r\n  25% {\r\n    animation-timing-function: ease-out;\r\n    transform: translateX(calc(var(--screen-carousel-offset) - var(--screen-width)));\r\n  }\r\n  50% {\r\n    transform: translateX(calc(var(--screen-carousel-offset) - var(--screen-width)));\r\n  }\r\n  75% {\r\n    animation-timing-function: ease-out;\r\n    transform: translateX(var(--screen-carousel-offset));\r\n  }\r\n}\r\n\r\n@keyframes scale {\r\n  25% {\r\n    animation-timing-function: cubic-bezier(1,0,1,1);\r\n    transform: scale(0.8);\r\n    border-radius: 10px;\r\n  }\r\n  50% {\r\n    animation-timing-function: cubic-bezier(0,1,1,1);\r\n    transform: scale(1);\r\n    border-radius: 0;\r\n  }\r\n}\r\n\r\n  \r\n",
                    "styleUrl": "./animation-demo.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "themeService",
                        "type": "ThemeService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "themeService",
                        "type": "ThemeService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"container\">\n    <div class=\"animation-header\">\n        <span class=\"title\">3. Animations</span>\n        <app-toggle-theme-button></app-toggle-theme-button>\n    </div>\n    <div class=\"animation-container\">\n        <div class=\"frame\" [ngClass]=\"{'dark': isDark}\">\n        </div>\n        <div class=\"screens-container\">\n            <span class=\"screen screen-1\">\n                <fa-icon [icon]=\"dizzyEmoji\"></fa-icon>\n            </span>\n            <span class=\"screen screen-3\">\n                <fa-icon [icon]=\"starsEmoji\"></fa-icon>\n            </span>\n            <span class=\"screen screen-2\">\n                <fa-icon [icon]=\"laughEmoji\"></fa-icon>\n            </span>\n            <span class=\"screen screen-5\">\n                <fa-icon [icon]=\"winkEmoji\"></fa-icon>\n            </span>\n            <span class=\"screen screen-4\">\n                <fa-icon [icon]=\"heartEmoji\"></fa-icon>\n            </span>\n            <span class=\"screen screen-1\">\n                <fa-icon [icon]=\"tongueEmoji\"></fa-icon>\n            </span>\n        </div>\n    </div>\n</div>\n"
        },
        {
            "name": "AppComponent",
            "id": "component-AppComponent-4d3ab59f535c1183e38bc14b835681136e23d3523aa7a2379f9fc1bce3079f083a917882d2e1447f39a4644562c743dec08d9f107d9fc6b621e7c2b19779fbe6",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "title",
                    "defaultValue": "'angular-app'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { Theme } from './services/enums';\nimport { ThemeService } from './services/theme.service';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  title = 'angular-app';\n\n  constructor(private themeService: ThemeService){\n    this.themeService.init();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "themeService",
                        "type": "ThemeService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "themeService",
                        "type": "ThemeService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<router-outlet></router-outlet>\n"
        },
        {
            "name": "CheckboxComponent",
            "id": "component-CheckboxComponent-8499607ac6dc68d8c907c3cbc0839588a7090e5471095b5af014279f302174c59153a40effbc1512fd0f884262375bcb25b4a8471bb6c4f064911cf7c2769425",
            "file": "src/app/components/checkbox/checkbox.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-checkbox",
            "styleUrls": [
                "./checkbox.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./checkbox.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "color",
                    "defaultValue": "'gradient-1'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "isCompleted",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "isCompletedChange",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "checkIcon",
                    "defaultValue": "faCheck",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "getStyleClasses",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toggle",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { faCheck } from '@fortawesome/free-solid-svg-icons';\n\n@Component({\n  selector: 'app-checkbox',\n  templateUrl: './checkbox.component.html',\n  styleUrls: ['./checkbox.component.scss']\n})\nexport class CheckboxComponent implements OnInit {\n  @Input() color: string = 'gradient-1';\n  @Input() isCompleted: boolean = false;\n  @Output() isCompletedChange = new EventEmitter<boolean>();\n\n  public checkIcon = faCheck;\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n  public toggle(): void {\n    this.isCompleted = !this.isCompleted;\n    this.isCompletedChange.emit(this.isCompleted);\n  }\n\n  public getStyleClasses(): string {\n    if(!this.isCompleted) {\n      return '';\n    }\n    return `checked gradients ${this.color}`;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import 'src/styles';\r\n\r\n.checkbox {\r\n    width: 15px;\r\n    height: 15px;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    border: 1px solid $dark-foreground-color;\r\n    border-radius: 3px;\r\n    margin: 15px;\r\n    cursor: pointer;\r\n\r\n    &.checked {\r\n        border: 1px solid transparent;\r\n\r\n        fa-icon {\r\n            color: white;\r\n            font-size: 11px;\r\n            height: 11px;\r\n            width: 11px;\r\n        }\r\n    }\r\n}",
                    "styleUrl": "./checkbox.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 14
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div (click)=\"toggle()\" class=\"checkbox\" [ngClass]=\"getStyleClasses()\">\n    <fa-icon *ngIf=\"isCompleted\" [icon]=\"checkIcon\"></fa-icon>\n</div>\n"
        },
        {
            "name": "DotsComponent",
            "id": "component-DotsComponent-633f05be8dabf4ec89fee5a69a9c07e3444785bbc7cd30bbcffbcf9725a00ff16dfbd36fa1bfe002ba6db3e45c9186f06caeed13ff956dbb2060d6fe3dac4750",
            "file": "src/app/components/dots/dots.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-dots",
            "styleUrls": [
                "./dots.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./dots.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "noOfDots",
                    "defaultValue": "10",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "matrix",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[][]",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-dots',\n  templateUrl: './dots.component.html',\n  styleUrls: ['./dots.component.scss']\n})\nexport class DotsComponent implements OnInit {\n  @Input() noOfDots: number = 10;\n  public matrix: string[][] = [];\n\n  constructor() { }\n\n  ngOnInit(): void {\n    for(let i=0; i < this.noOfDots; i++) {\n      const line = [];\n      for(let j=0; j < this.noOfDots; j++) {\n        line.push('.');\n      }\n      this.matrix.push(line);\n    }\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\r\n.matrix-container {\r\n    display: flex;\r\n    flex-direction: column;\r\n\r\n    .line {\r\n        display: flex;\r\n\r\n        .dot {\r\n            display: block;\r\n            width: 3px;\r\n            height: 3px;\r\n            background-color: white;\r\n            border-radius: 50%;\r\n            margin: 15px;\r\n        }\r\n    }\r\n}",
                    "styleUrl": "./dots.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 10
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<span class=\"matrix-container\">\n    <span *ngFor=\"let line of matrix\" class=\"line\">\n        <span *ngFor=\"let dot of line\" class=\"dot\"></span>\n    </span>\n</span>\n"
        },
        {
            "name": "GameComponent",
            "id": "component-GameComponent-042f00f98604033e2514cbd57d278c8de9894531b1cb174f7328ebcc5ef727dd4afec92e568192b02278ce951228b1751e87e642c9f365a0d8e8e54c4f396c77",
            "file": "src/app/components/game/game.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-game",
            "styleUrls": [
                "./game.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./game.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "clicksDebounce",
                    "defaultValue": "new Subject<number>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "columnsEmptySpots",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "currentPlayer",
                    "defaultValue": "GameTile.Player1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "gameMatrix",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GameTile[][]",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "gameTile",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef | undefined",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'gameTile'"
                        }
                    ]
                },
                {
                    "name": "isGameOn",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "numberOfColumns",
                    "defaultValue": "7",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "numberOfRows",
                    "defaultValue": "7",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "selectedColumns",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "streakToWin",
                    "defaultValue": "4",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "subscriptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription[]",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "botMove",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 226,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "changePlayerTurn",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 235,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "checkColumn",
                    "args": [
                        {
                            "name": "xPosition",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "yPosition",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 166,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "xPosition",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "yPosition",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "checkFirstDiagonal",
                    "args": [
                        {
                            "name": "xPosition",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "yPosition",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 185,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "xPosition",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "yPosition",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "checkMoveForWin",
                    "args": [
                        {
                            "name": "xPosition",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "yPosition",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 245,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "xPosition",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "yPosition",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "checkRow",
                    "args": [
                        {
                            "name": "xPosition",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "yPosition",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 147,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "xPosition",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "yPosition",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "checkSecondDiagonal",
                    "args": [
                        {
                            "name": "xPosition",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "yPosition",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 204,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "xPosition",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "yPosition",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "chooseColumn",
                    "args": [
                        {
                            "name": "columnIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "columnIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createGameMatrix",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 137,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "getColumnSelectedClass",
                    "args": [
                        {
                            "name": "columnIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 106,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "columnIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getCurrentPlayerClass",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 98,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "getDropAnimationTransitionMs",
                    "args": [
                        {
                            "name": "columnIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 110,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "columnIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getMoveSelectorAnimationOptions",
                    "args": [
                        {
                            "name": "columnIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "columnIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getMoveSelectorClass",
                    "args": [
                        {
                            "name": "columnIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "columnIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getMoveSelectorDisabledClass",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 102,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "getTileColor",
                    "args": [
                        {
                            "name": "tile",
                            "type": "GameTile",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "tile",
                            "type": "GameTile",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTileHeight",
                    "args": [],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 114,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "isBotMove",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 94,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "isDraw",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 222,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "selectColumn",
                    "args": [
                        {
                            "name": "columnIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "columnIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "subscribeToClicksDebounce",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 127,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "subscribeToIsGameOn",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 118,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { animate, style, transition, trigger } from '@angular/animations';\nimport { Component, ElementRef, OnDestroy, OnInit, ViewChild } from '@angular/core';\nimport { Subject, Subscription } from 'rxjs';\nimport { debounceTime, map, throttleTime } from 'rxjs/operators'\nimport { GameService } from 'src/app/services';\nimport { GameMode, GameStatus, GameTile, PlayerStyleClass } from './enums';\n\n@Component({\n  selector: 'app-game',\n  templateUrl: './game.component.html',\n  styleUrls: ['./game.component.scss'],\n  animations: [\n    trigger('dropAnimation', [\n      transition(':enter', []),\n      transition('* => *', \n        animate('{{dropAnimationTransitionMs}}ms ease-in', style({\n          transform: 'translateY({{distance}}px)'\n        })), {params: {dropAnimationTransitionMs: 500, distance: 300}}\n      )\n    ])\n  ]\n})\nexport class GameComponent implements OnInit, OnDestroy {\n    @ViewChild('gameTile') gameTile: ElementRef | undefined;\n    public gameMatrix: GameTile[][] = [];\n    public columnsEmptySpots: number[] = [];\n    public isGameOn = true;\n\n    private clicksDebounce = new Subject<number>();\n    private numberOfColumns = 7;\n    private numberOfRows = 7;\n    private streakToWin = 4;\n    private currentPlayer = GameTile.Player1;\n    private selectedColumns: number[] = [];\n    private subscriptions: Subscription[] = [];\n\n    constructor(private gameService: GameService) { }\n\n    public ngOnInit(): void {        \n        this.createGameMatrix();\n        this.subscribeToIsGameOn();\n        this.subscribeToClicksDebounce();\n    }\n\n    public ngOnDestroy(): void {\n        this.subscriptions.forEach((subscription) => subscription.unsubscribe());\n    }\n\n    public selectColumn(columnIndex: number): void {\n        this.clicksDebounce.next(columnIndex);\n    }\n\n    public chooseColumn(columnIndex: number): void {\n        const firstEmptyTileIndex = this.gameMatrix[columnIndex].indexOf(GameTile.Empty);\n\n            if (firstEmptyTileIndex !== -1) {\n                this.columnsEmptySpots[columnIndex] -= 1;\n                this.selectedColumns[columnIndex] = 1;\n\n                setTimeout(() => {\n                    this.gameMatrix[columnIndex][firstEmptyTileIndex] = this.currentPlayer;\n                    this.selectedColumns[columnIndex] = 0;\n                    this.checkMoveForWin(columnIndex, firstEmptyTileIndex);\n                }, this.getDropAnimationTransitionMs(columnIndex));\n            }\n    }\n\n    public getTileColor(tile: GameTile): string {\n        switch(tile) {\n        case GameTile.Player1:\n            return PlayerStyleClass.Player1;\n        case GameTile.Player2:\n            return PlayerStyleClass.Player2;\n        default:\n            return '';\n        }\n    }\n\n    public getMoveSelectorClass(columnIndex: number): string {\n        return `${this.getCurrentPlayerClass()} ${this.getColumnSelectedClass(columnIndex)} ${this.getMoveSelectorDisabledClass()}`;\n    }\n\n    public getMoveSelectorAnimationOptions(columnIndex: number): any {\n        const rowsHeight = this.columnsEmptySpots[columnIndex] + 1;\n        const heigthOfTile = this.getTileHeight() * 1.21;\n        const distance = rowsHeight * heigthOfTile;\n        const dropAnimationTransitionMs = this.getDropAnimationTransitionMs(columnIndex);\n        return {\n            value: this.columnsEmptySpots[columnIndex],\n            params: { dropAnimationTransitionMs, distance }\n        };\n    }\n\n    public isBotMove(): boolean {\n        return this.gameService.getGameMode() === GameMode.PlayerVsBot && this.currentPlayer === GameTile.Player2;\n    }\n\n    private getCurrentPlayerClass(): string {\n        return this.currentPlayer === GameTile.Player1 ? PlayerStyleClass.Player1 : PlayerStyleClass.Player2;\n    }\n\n    private getMoveSelectorDisabledClass(): string {\n        return !this.isGameOn || this.isBotMove() ? 'disabled' : '';\n    }\n\n    private getColumnSelectedClass(columnIndex: number): string {\n        return this.selectedColumns[columnIndex] ? 'selected' : '';\n    }\n\n    private getDropAnimationTransitionMs(columnIndex: number): number {\n        return 100 + this.columnsEmptySpots[columnIndex] * this.getTileHeight();\n    }\n\n    private getTileHeight(): number {\n        return this.gameTile?.nativeElement.offsetHeight;\n    }\n\n    private subscribeToIsGameOn(): void {\n        const subscription = this.gameService.gameStatus$.pipe(\n            map((gameStatus) => gameStatus === GameStatus.Ongoing)\n        ).subscribe((isGameOn) => {\n            this.isGameOn = isGameOn;\n        });\n        this.subscriptions.push(subscription);\n    } \n\n    private subscribeToClicksDebounce(): void {\n        const subscription = this.clicksDebounce.pipe(\n            throttleTime(1000)\n        ).subscribe((columnIndex: number) => {\n            this.chooseColumn(columnIndex);\n        });\n\n        this.subscriptions.push(subscription);\n    } \n\n    private createGameMatrix(): void {\n        this.gameMatrix = Array(this.numberOfRows);\n\n        for(let i = 0; i < this.numberOfRows; i++) {\n            this.gameMatrix[i] = Array(this.numberOfColumns).fill(GameTile.Empty);\n            this.columnsEmptySpots.push(this.numberOfRows);\n            this.selectedColumns.push(0);\n        }\n    }\n\n    private checkRow(xPosition: number, yPosition: number): boolean {\n        const rangeToCheck = this.streakToWin - 1;\n        const startIndex = (xPosition - rangeToCheck) < 0 ? 0 : xPosition - rangeToCheck;\n        const endIndex = xPosition + rangeToCheck < this.numberOfColumns ? xPosition + rangeToCheck : this.numberOfColumns - 1;\n        let streakCounter = 0;\n\n        for(let i = startIndex; i <= endIndex; i++) {\n            if(this.gameMatrix[i][yPosition] === this.currentPlayer) {\n                streakCounter += 1;\n                if(streakCounter === this.streakToWin) {\n                    return true;\n                }\n            } else {\n                streakCounter = 0;\n            }\n        }\n        return false;\n    }\n\n    private checkColumn(xPosition: number, yPosition: number): boolean {\n        const rangeToCheck = this.streakToWin - 1;\n        const startIndex = (yPosition - rangeToCheck) < 0 ? 0 : yPosition - rangeToCheck;\n        const endIndex = yPosition + rangeToCheck < this.numberOfRows ? yPosition + rangeToCheck : this.numberOfRows - 1;\n        let streakCounter = 0;\n        \n        for(let i = startIndex; i <= endIndex; i++) {\n            if(this.gameMatrix[xPosition][i] === this.currentPlayer) {\n                streakCounter += 1;\n                if(streakCounter === this.streakToWin) {\n                    return true;\n                }\n            } else {\n                streakCounter = 0;\n            }\n        }\n        return false;\n    }  \n\n    private checkFirstDiagonal(xPosition: number, yPosition: number): boolean {\n        const rangeToCheck = this.streakToWin - 1;\n        const startStep = 0 - Math.min(xPosition, yPosition, rangeToCheck);\n        const endStep = Math.min(this.numberOfRows - xPosition - 1, this.numberOfColumns - yPosition - 1, rangeToCheck);\n        let streakCounter = 0;\n        \n        for(let step = startStep; step <= endStep; step++) {\n            if(this.gameMatrix[xPosition + step][yPosition + step] === this.currentPlayer) {\n                streakCounter += 1;\n                if(streakCounter === this.streakToWin) {  \n                    return true;\n                }\n            } else {\n                streakCounter = 0;\n            }\n        }\n        return false;\n    }\n\n    private checkSecondDiagonal(xPosition: number, yPosition: number): boolean {\n        const rangeToCheck = this.streakToWin - 1;\n        const startStep = 0 - Math.min(this.numberOfRows - xPosition - 1, yPosition, rangeToCheck);\n        const endStep = Math.min(xPosition, this.numberOfColumns - yPosition - 1, rangeToCheck);\n        let streakCounter = 0;\n        for(let step = startStep; step <= endStep; step++) {\n            if(this.gameMatrix[xPosition - step][yPosition + step] === this.currentPlayer) {\n                streakCounter += 1;\n                if(streakCounter === this.streakToWin) {  \n                    return true;\n                }\n            } else {\n                streakCounter = 0;\n            }\n        }\n        return false;\n    }\n  \n    private isDraw(): boolean {\n        return this.columnsEmptySpots.find((emptySpots) => emptySpots > 0) === undefined;\n    }\n\n    private botMove(): void {\n        let randomColumnIndex = 0;\n        do {\n            randomColumnIndex = Math.floor(Math.random() * this.numberOfColumns);\n        } while (this.columnsEmptySpots[randomColumnIndex] === 0);\n\n        this.chooseColumn(randomColumnIndex);\n    }\n\n    private changePlayerTurn(): void {\n        this.currentPlayer = this.currentPlayer === GameTile.Player1 ? GameTile.Player2 : GameTile.Player1;\n\n        if(this.gameService.getGameMode() === GameMode.PlayerVsBot && this.currentPlayer === GameTile.Player2) {\n            setTimeout(() => { \n                this.botMove();\n            }, 1000);\n        }\n    }\n\n    private checkMoveForWin(xPosition: number, yPosition: number): boolean {\n        if(this.isDraw()) {\n            alert('It is a DRAW!');\n            this.gameService.gameStatus$.next(GameStatus.Draw);\n        } else if(\n            this.checkRow(xPosition, yPosition) || \n            this.checkColumn(xPosition, yPosition) ||\n            this.checkFirstDiagonal(xPosition, yPosition) ||\n            this.checkSecondDiagonal(xPosition, yPosition)\n        ) {\n            alert(GameTile[this.currentPlayer] + ' a castigat');\n            const wonStatus = this.currentPlayer === GameTile.Player1 ? GameStatus.Player1Won : GameStatus.Player2Won;\n            this.gameService.gameStatus$.next(wonStatus);\n        } else {\n            this.changePlayerTurn();\n            return false;\n        }\n        return true;\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '/src/styles.scss';\r\n\r\n$player1-color: yellow;\r\n$player2-color: orange;\r\n$border-radius: 50px;\r\n\r\n:host {\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n\r\n    .move-selectors-container {\r\n        display: flex;\r\n        width: 95%;\r\n        margin-bottom: 2%;\r\n\r\n        .move-selector-container {\r\n            flex: 1 1 auto;\r\n            position: relative;\r\n\r\n            &::after {\r\n                content: '';\r\n                display: block;\r\n                padding-top: 100%;\r\n            }\r\n\r\n            .move-selector {\r\n                position: absolute;\r\n                height: 100%;\r\n                width: 100%;\r\n                display: flex;\r\n\r\n                .selector{\r\n                    flex: 1 1 auto;\r\n                    background-color: var(--gray);\r\n                    cursor: pointer;\r\n                    border-radius: $border-radius;\r\n                    margin: 10%;\r\n        \r\n                    &.player1.selected, &.player1:hover {\r\n                        background-color: $player1-color;\r\n                    }\r\n        \r\n                    &.player2.selected, &.player2:hover {\r\n                        background-color: $player2-color;\r\n                    }\r\n        \r\n                    &.disabled:not(.selected) {\r\n                        visibility: hidden;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    .game-matrix-container {\r\n        width: 100%;\r\n        position: relative;\r\n        display: flex;\r\n        justify-content: center;\r\n        align-items: center;\r\n\r\n        &::after {\r\n            content: '';\r\n            display: block;\r\n            padding-top: 100%;\r\n            background-color: red;\r\n        }\r\n\r\n        .game-canvas {\r\n            position: absolute;\r\n            z-index: 2;\r\n            width: 100%;\r\n            height: 100%;\r\n        }\r\n\r\n        .game-matrix {\r\n            position: absolute;\r\n            z-index: 1;\r\n            display: flex;\r\n            width: 95%;\r\n            height: 95%;\r\n\r\n            .game-column {\r\n                display: flex;\r\n                flex-direction: column-reverse;\r\n                flex: 1 1 auto;\r\n    \r\n                .game-tile {\r\n                    flex: 1 1 auto;\r\n                    background-color: transparent;\r\n                    border-radius: $border-radius;\r\n                    margin: 9%;\r\n    \r\n                    &.player1 {\r\n                        background-color: $player1-color;\r\n                    }\r\n    \r\n                    &.player2 {\r\n                        background-color: $player2-color;\r\n                    }\r\n                }        \r\n            }\r\n        }\r\n    }\r\n}\r\n",
                    "styleUrl": "./game.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "gameService",
                        "type": "GameService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 35,
                "jsdoctags": [
                    {
                        "name": "gameService",
                        "type": "GameService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "\n<div class=\"move-selectors-container\">\n    <div *ngFor=\"let column of gameMatrix; index as i\" class=\"move-selector-container\">\n        <div \n            class=\"move-selector\" \n            (click)=\"selectColumn(i)\"\n            [@dropAnimation]=\"getMoveSelectorAnimationOptions(i)\"\n        >\n            <div \n                class=\"selector\"\n                [ngClass]=\"getMoveSelectorClass(i)\" \n            ></div>\n        </div>\n    </div>\n        \n</div>\n<div class=\"game-matrix-container\">\n    <img class=\"game-canvas\" src=\"assets/images/game-canvas.svg\">\n    <div class=\"game-matrix\">\n        <div *ngFor=\"let column of gameMatrix; index as i\" class=\"game-column\">\n            <div #gameTile *ngFor=\"let tile of column\" class=\"game-tile\" [ngClass]=\"getTileColor(tile)\"></div>\n        </div>\n    </div>\n</div>\n\n\n"
        },
        {
            "name": "GameSectionComponent",
            "id": "component-GameSectionComponent-c53d1d775fbbe7dc1dd78641fb624673b926a2e4dd396da515d1bc6b6c812d1947c3df22ad2853158f2387a1b69ee8d623e1ecf04d5ea09450355dbf98d06ead",
            "file": "src/app/components/game-section/game-section.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-game-section",
            "styleUrls": [
                "./game-section.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./game-section.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "duelIcon",
                    "defaultValue": "faPeopleArrows",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "gameStatus",
                    "defaultValue": "GameStatus.NotStarted",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GameStatus",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "robotIcon",
                    "defaultValue": "faRobot",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "subscriptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription[]",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "hasGameStarted",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "startBotGame",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "startGame",
                    "args": [
                        {
                            "name": "gameMode",
                            "type": "GameMode",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "gameMode",
                            "type": "GameMode",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "startPlayerGame",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "subscribeToGameStatus",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { faRobot, faPeopleArrows } from '@fortawesome/free-solid-svg-icons';\nimport { Subscription } from 'rxjs';\nimport { GameService } from 'src/app/services';\nimport { GameMode, GameStatus } from '../game/enums';\n\n@Component({\n  selector: 'app-game-section',\n  templateUrl: './game-section.component.html',\n  styleUrls: ['./game-section.component.scss']\n})\nexport class GameSectionComponent implements OnInit, OnDestroy {\n    private gameStatus: GameStatus = GameStatus.NotStarted;\n    private subscriptions: Subscription[] = [];\n\n    public robotIcon = faRobot;\n    public duelIcon = faPeopleArrows;\n\n    constructor(private gameService: GameService) { }\n\n    public ngOnInit(): void {\n        this.subscribeToGameStatus();\n    }\n\n    public ngOnDestroy(): void {\n        this.subscriptions.forEach((subscription) => subscription.unsubscribe());\n    }\n\n    public startBotGame(): void {\n        this.startGame(GameMode.PlayerVsBot);\n    }\n\n    public startPlayerGame(): void {\n        this.startGame(GameMode.PlayerVsPlayer);\n    }\n\n    public hasGameStarted(): boolean {\n        return this.gameStatus !== GameStatus.NotStarted;\n    }\n\n    private startGame(gameMode: GameMode): void {\n        this.gameService.gameStatus$.next(GameStatus.Ongoing);\n        this.gameService.setGameMode(gameMode);\n    }\n\n    private subscribeToGameStatus(): void {\n        const subscription = this.gameService.gameStatus$.subscribe((gameStatus) => {\n            this.gameStatus = gameStatus;\n        });\n        this.subscriptions.push(subscription);\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import 'src/styles';\r\n\r\n$dark-background-width: 35vw;\r\n$text-color: #1B1D27;\r\n$background-color: rgb(250, 250, 250);\r\n\r\n:host {\r\n    height: 100vh;\r\n    display: block;\r\n    position: relative;\r\n    font-family: 'Fira Sans', sans-serif;\r\n\r\n    .header {\r\n        position: absolute;\r\n        z-index: 2;\r\n        top: 30px;\r\n        left: 30px;\r\n        display: flex;\r\n        align-items: center;\r\n\r\n        .header-title {\r\n            font-size: 32px;\r\n            font-weight: 600;\r\n            margin-right: 15px;\r\n            color: var(--font-color);\r\n        }\r\n    }\r\n    \r\n    .content {\r\n        width: 90%;\r\n        height: 100%;\r\n        padding: 0 5%;\r\n        position: absolute;\r\n        display: flex;\r\n        justify-content: space-between;\r\n        z-index: 1;\r\n\r\n        .details-container {\r\n            display: flex;\r\n            flex-direction: column;\r\n            align-items: center;\r\n            justify-content: center;\r\n            flex: 1;\r\n    \r\n            .title {\r\n                margin-bottom: 10%;\r\n                text-align: center;\r\n                font-size: 3rem;\r\n                color: var(--font-color);\r\n                text-transform: uppercase;\r\n                font-family: 'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;\r\n            }\r\n\r\n            .buttons-container {\r\n                width: 100%;\r\n                max-width: 400px;\r\n                height: 180px;\r\n                display: flex;\r\n                justify-content: space-between;\r\n                flex-direction: column;\r\n\r\n                .start-button {\r\n                    height: 80px;\r\n                    display: flex;\r\n                    align-items: center;\r\n                    justify-content: center;\r\n                    text-align: center;\r\n                    cursor: pointer;\r\n                    border-radius: 20px;\r\n                    font-size: 16px;\r\n                    color: white;\r\n\r\n                    background-color: $secondary-color;\r\n                    box-shadow: 0 20px 30px -20px rgba($color: $secondary-color, $alpha: 0.5);\r\n                    transition: 0.3s ease;\r\n\r\n                    &:hover {\r\n                        transform: translateY(1px);\r\n                        box-shadow: 0 20px 20px -15px rgba($color: $secondary-color, $alpha: 0.6);\r\n                        background-color: lighten($secondary-color, 5%);\r\n                    }\r\n\r\n                    fa-icon {\r\n                        font-size: 26px;\r\n                        margin-right: 20px;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        .game-container {\r\n            display: flex;\r\n            justify-content: center;\r\n            align-items: center;\r\n            flex: 2;\r\n\r\n            app-game {\r\n                width: 70%;\r\n                max-width: 500px;\r\n            }\r\n        }\r\n    }\r\n\r\n    .background {\r\n        height: 100%;\r\n        width: 100vw;\r\n        background-color: var(--background-color);\r\n    }\r\n\r\n    @media (max-width: $mobile) {\r\n        .content {            \r\n            flex-direction: column;\r\n\r\n            .game-container app-game {\r\n                width: 90%;\r\n            }\r\n        }\r\n    }\r\n}\r\n",
                    "styleUrl": "./game-section.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "gameService",
                        "type": "GameService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "gameService",
                        "type": "GameService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<span class=\"header\">\n    <span *ngIf=\"hasGameStarted()\" class=\"header-title\">2. The Game</span>\n    <app-toggle-theme-button></app-toggle-theme-button>\n</span>\n<div class=\"content\">\n    <div *ngIf=\"!hasGameStarted()\" class=\"details-container\">\n        <div class=\"title\">2. The Game</div>\n        <div class=\"buttons-container\">\n            <span class=\"start-button\" (click)=\"startBotGame()\">\n                <fa-icon [icon]=\"robotIcon\"></fa-icon>\n                <span>Start Game <br> Player vs Bot</span>\n            </span>\n            <span class=\"start-button\" (click)=\"startPlayerGame()\">\n                <fa-icon [icon]=\"duelIcon\"></fa-icon>\n                <span>Start Game <br> Player vs Player</span>\n            </span>\n        </div>\n    </div>\n    <div *ngIf=\"hasGameStarted()\" class=\"game-container\">\n        <app-game></app-game>\n    </div>\n</div>\n<div class=\"background\"></div>\n"
        },
        {
            "name": "HomeComponent",
            "id": "component-HomeComponent-93047b3088d2db457e515dc266f54291a0a2a157cfb2dc26f013959caa49673d065bef11085d2997c41b90c23028f084d913fc3c927383dc9226f0c3df7d73e0",
            "file": "src/app/pages/home/home.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-home",
            "styleUrls": [
                "./home.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./home.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "currentPageIndex",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 78,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "isDestroyed$",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 79,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 95,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "subscribeToCurrentPage",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 87,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { animate, keyframes, query, state, style, transition, trigger, group, animateChild } from '@angular/animations';\nimport { Component, OnDestroy, OnInit } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { PageChangerService } from 'src/app/services';\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.scss'],\n  animations: [\n    trigger('fade', [\n      transition(':increment, :decrement', [\n        animate('2s cubic-bezier(0,1,1,1)', keyframes([\n          style({ \n            transform: 'scale(0) translateY(100px)',\n            offset: 0.4\n           }),\n          style({ \n            transform: 'translateY(100px) scale(0)',\n            animationTimingFunction: 'cubic-bezier(.16,3,1,1.05)',\n            offset: 0.9\n          }),\n          style({ \n            transform: 'translateY(0) scale(1)',\n            offset: 1\n          })\n        ])),\n      ])\n    ]),\n    trigger('slide', [\n      state('1', style({\n        transform: 'translateX(-100vw)'\n      })),\n      state('2', style({\n        transform: 'translateX(-200vw)'\n      })),\n      state('3', style({\n        transform: 'translateX(-300vw)'\n      })),\n      transition(':increment, :decrement', [\n        group([\n          query('@scale', [ animateChild() ]),\n          animate('2s cubic-bezier(.75,0,.25,1)'),\n        ]),\n      ])\n    ]),\n    trigger('scale', [\n      state('1', style({\n        transform: 'scale(1)'\n      })),\n      state('2', style({\n        transform: 'scale(1)'\n      })),\n      state('3', style({\n        transform: 'scale(1)'\n      })),\n      transition(':increment, :decrement', [\n        animate('2s cubic-bezier(1,0,0,1)', keyframes([\n          style({ \n            transform: 'scale(0.8)',\n            'border-radius': '20px',\n            'box-shadow': '0 0 70px -30px black',\n            'animation-timing-function': 'cubic-bezier(1,0,1,1)',\n            offset: 0.5\n           }),\n           style({ \n            transform: 'scale(1)',\n            'border-radius': 0,\n            offset: 1\n           }),\n        ]))\n      ])\n    ]),\n  ]\n})\nexport class HomeComponent implements OnInit, OnDestroy {\n  public currentPageIndex: number = 0;\n  private isDestroyed$ = new Subject();\n\n  constructor(private pageChangerService: PageChangerService) {}\n\n  public ngOnInit(): void {\n    this.subscribeToCurrentPage();\n  }\n\n  private subscribeToCurrentPage(): void {\n    this.pageChangerService.currentPageIndex$.pipe(\n      takeUntil(this.isDestroyed$)\n    ).subscribe((currentPageIndex) => {\n      this.currentPageIndex = currentPageIndex;\n    })\n  }\n  \n  public ngOnDestroy(): void {\n    this.isDestroyed$.next();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '/src/styles.scss';\r\n\r\n.slider-container {\r\n    position: fixed;\r\n    z-index: 5;\r\n    bottom: 12px;\r\n    left: 0;\r\n    right: 0;\r\n}\r\n\r\n.main-container {\r\n    height: 100vh;\r\n    width: 100vw;\r\n    overflow: hidden;\r\n    background-color: var(--slider-background-color);\r\n\r\n    .carousel-container {\r\n        display: flex;\r\n        height: 100vh;\r\n    }\r\n}",
                    "styleUrl": "./home.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "pageChangerService",
                        "type": "PageChangerService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 79,
                "jsdoctags": [
                    {
                        "name": "pageChangerService",
                        "type": "PageChangerService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"slider-container\" [@fade]=\"currentPageIndex\">\n    <app-slider></app-slider>\n</div>\n<div class=\"main-container\">\n    <div [@slide]=\"currentPageIndex\" class=\"carousel-container\">\n        <app-presentation [@scale]=\"currentPageIndex\"></app-presentation>\n        <app-todo [@scale]=\"currentPageIndex\"></app-todo>\n        <app-game-section [@scale]=\"currentPageIndex\"></app-game-section>\n        <app-animation-demo [@scale]=\"currentPageIndex\"></app-animation-demo>\n    </div>\n</div>\n"
        },
        {
            "name": "LogoComponent",
            "id": "component-LogoComponent-1e397d03aaa82ad9976141488754343a7793ca629c35bfb9bcffd02bb227a284c2c46b4825fab0642405f25b3791c37368caad9d84c70a7e385c7eaf5f041135",
            "file": "src/app/components/logo/logo.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-logo",
            "styleUrls": [
                "./logo.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./logo.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "frameworkName",
                    "defaultValue": "'Angular'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "getDelayTime",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getFrameworkNameLetters",
                    "args": [],
                    "optional": false,
                    "returnType": "string[]",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { animate, style, transition, trigger } from '@angular/animations';\nimport { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-logo',\n  templateUrl: './logo.component.html',\n  styleUrls: ['./logo.component.scss'],\n  animations: [\n    trigger('fadeInUp', [\n      transition(':enter', [\n        style({ \n          opacity: 0,\n          transform: 'translateY(50px)'\n         }),\n        animate('4s ease-out', style({\n          transform: 'translateY(-15px)',\n          opacity: 100\n        }))\n      ], { params: {delay: 100} })\n    ]),\n    trigger('fadeInDown', [\n      transition(':enter', [\n        style({ \n          opacity: 0,\n         }),\n        animate('2s {{delay}}ms ease-out', style({\n          opacity: 100\n        }))\n      ], { params: {delay: 1} } )\n    ])\n  ]\n})\nexport class LogoComponent {\n  private frameworkName = 'Angular';\n\n  public getFrameworkNameLetters(): string[] {\n    return [...this.frameworkName];\n  }\n\n  public getDelayTime(index: number): any {\n    const delay = index * 200;\n    return {\n      value: '',\n      params: { delay }\n  };\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\r\n@import 'src/styles';\r\n@import url('https://fonts.googleapis.com/css2?family=DM+Serif+Display:ital@1&display=swap');\r\n\r\n$text-color: #ffffff;\r\n\r\n.framework-name-container {\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    color: $text-color;\r\n    font-family: 'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;\r\n    // font-family: 'DM Serif Display', serif;\r\n    font-size: 10rem;\r\n    letter-spacing: 1rem;\r\n\r\n    .letter {\r\n        z-index: 5;\r\n        margin-top: 15%;\r\n        font-size: 10vw;\r\n        font-weight: 600;\r\n        text-transform: uppercase;\r\n    }\r\n\r\n    .logo {\r\n        width: 40vmin;\r\n        height: 55vmin;\r\n        position: absolute;\r\n        z-index: 0;\r\n        display: flex;\r\n\r\n        .bottom-fade {\r\n            box-shadow: inset 0px -350px 100px -75px $dark-background-color;\r\n            position: absolute;\r\n            z-index: 3;\r\n            width: 100%;\r\n            height: 100%;\r\n\r\n            @media (max-width: $mobile) {\r\n                box-shadow: inset 0px -200px 50px -60px $dark-background-color;\r\n            }\r\n        }\r\n\r\n        .angular-logo {\r\n            width: 100%;\r\n            transform: translateY(-15px);\r\n        }\r\n    }\r\n}",
                    "styleUrl": "./logo.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div class=\"framework-name-container\">\n    <div [@fadeInDown]=\"getDelayTime(i)\" *ngFor=\"let letter of getFrameworkNameLetters(); index as i\" class=\"letter\">{{ letter }}</div>\n    <div class=\"logo\">\n        <div class=\"bottom-fade\"></div>\n        <img @fadeInUp class=\"angular-logo\" src=\"assets/images/angular-logo.svg\">\n    </div>\n</div>\n"
        },
        {
            "name": "PresentationComponent",
            "id": "component-PresentationComponent-a3dea62a7834072374050deb63c20f0509112d9814f21e59bc23e0c37d839515ee794c893a5be7f411f114416defbde2572822af1ccfc9040309ae39f6243334",
            "file": "src/app/components/presentation/presentation.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-presentation",
            "styleUrls": [
                "./presentation.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./presentation.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { animate, style, transition, trigger } from '@angular/animations';\nimport { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-presentation',\n  templateUrl: './presentation.component.html',\n  styleUrls: ['./presentation.component.scss'],\n  animations: [\n    trigger('fadeIn', [\n      transition(':enter', [\n        style({ \n          opacity: 0,\n         }),\n        animate('2s ease-in', style({\n          opacity: 100\n        }))\n      ])\n    ]),\n    trigger('glowAnimation', [\n      transition(':enter', [\n        style({ \n          boxShadow: '0 0 40px 20px #fff, 0 0 40px 20px #f05526, 0 0 40px 20px #DD0031',\n          opacity: 0\n         }),\n        animate('4s 2s ease-out', style({\n          boxShadow: '0 0 70px 30px #fff, 0 0 70px 60px #f05526, 0 0 200px 60px #DD0031',\n          opacity: 0.8\n        }))\n      ])\n    ])\n  ]\n})\nexport class PresentationComponent {\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import 'src/styles';\r\n\r\n$dark-background-width: 65vw;\r\n$text-color: #fff;\r\n$gradient-background-gradient: linear-gradient(60deg, #dd0031, #f1683e);\r\n\r\n:host {\r\n    --glow-animation-1-base-scale: 2;\r\n    --glow-animation-2-base-scale: 3;\r\n\r\n    height: 100vh;\r\n    display: block;\r\n    position: relative;\r\n    \r\n    .content {\r\n        width: 100%;\r\n        height: 100%;\r\n        position: absolute;\r\n        z-index: 1;\r\n        display: flex;\r\n        justify-content: center;\r\n        align-items: center;\r\n    }\r\n\r\n    .background {\r\n        position: relative;\r\n        height: 100%;\r\n        width: 100%;\r\n        display: flex;\r\n        overflow: hidden;\r\n\r\n        .glow-1 {\r\n            position: absolute;\r\n            z-index: 4;\r\n            border-radius: 50%;\r\n            box-shadow: 0 0 80px 30px #fff,  \r\n                        0 0 80px 70px $secondary-color, \r\n                        0 0 300px 90px $primary-color; \r\n            transform: scale(var(--glow-animation-1-base-scale));\r\n            opacity: 0.8;\r\n            animation: glowAnimation1 8s linear 6s infinite;\r\n        }  \r\n\r\n        .glow-2 {\r\n            position: absolute;\r\n            z-index: 4;\r\n            bottom: 0;\r\n            right: 0;\r\n            box-shadow: 0 0 70px 30px #fff,  \r\n                        0 0 70px 60px $secondary-color, \r\n                        0 0 200px 60px $primary-color;\r\n            border-radius: 50%;\r\n            transform: scale(var(--glow-animation-2-base-scale));\r\n            opacity: 0.8;\r\n            animation: glowAnimation2 10s linear 6s infinite;\r\n        }\r\n    \r\n        .dark-background {\r\n            height: 100vh;\r\n            width: 100vw;\r\n            background-color: $dark-background-color;\r\n        }\r\n    }\r\n}\r\n\r\n@mixin glow-animation($name, $base-scale) {\r\n    @keyframes #{$name} {\r\n        0% {\r\n            box-shadow: 0 0 70px 30px #fff,  \r\n                        0 0 70px 60px $secondary-color, \r\n                        0 0 200px 60px $primary-color;\r\n            transform: scale($base-scale) rotate(0);\r\n        }\r\n        25% {\r\n            box-shadow: 0 0 70px 30px #fff,  \r\n                        0 0 70px 70px $secondary-color, \r\n                        0 0 200px 70px $primary-color;\r\n            transform: scale(calc($base-scale - 1)) rotate(90deg);\r\n        }\r\n        50% {\r\n            box-shadow: 0 0 70px 30px #fff,  \r\n                        0 0 70px 50px $secondary-color, \r\n                        0 0 200px 60px $primary-color;\r\n            transform: scale(calc($base-scale - 0.5)) rotate(180deg);\r\n        }\r\n        75% {\r\n            box-shadow: 0 0 70px 30px #fff,  \r\n                        0 0 200px 80px $secondary-color, \r\n                        0 0 200px 70px $primary-color;\r\n            transform: scale(calc($base-scale - 1.2)) rotate(270deg);\r\n        }\r\n        100% {\r\n            box-shadow: 0 0 70px 30px #fff,  \r\n                        0 0 70px 60px $secondary-color, \r\n                        0 0 200px 60px $primary-color;\r\n            transform: scale($base-scale) rotate(360deg);\r\n        }\r\n    }  \r\n}\r\n\r\n@include glow-animation(glowAnimation1, var(--glow-animation-1-base-scale));\r\n@include glow-animation(glowAnimation2, var(--glow-animation-2-base-scale));\r\n",
                    "styleUrl": "./presentation.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div class=\"content\">\n    <app-logo></app-logo>\n</div>\n<div class=\"background\">\n    <span @glowAnimation class=\"glow-1\"></span>\n    <span @glowAnimation class=\"glow-2\"></span>\n    <div class=\"dark-background\"></div>\n    <div class=\"gradient-background\"></div>\n</div>\n"
        },
        {
            "name": "SliderComponent",
            "id": "component-SliderComponent-2a6c4298104fbcb8863963695632ea3e24a0837a5cc1c87d3b32ceae2e2c44ba2726f713e5ba8b1682115284534736c6bcaa88d0cb4af8281c6cd90530034028",
            "file": "src/app/components/slider/slider.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-slider",
            "styleUrls": [
                "./slider.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./slider.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "arrowLeft",
                    "defaultValue": "faArrowLeft",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "arrowRight",
                    "defaultValue": "faArrowRight",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "isAvailableNext",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "isAvailablePrevious",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "nextPage",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "previousPage",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { faArrowLeft, faArrowRight } from '@fortawesome/free-solid-svg-icons';\nimport { PageChangerService } from 'src/app/services';\n\n@Component({\n  selector: 'app-slider',\n  templateUrl: './slider.component.html',\n  styleUrls: ['./slider.component.scss']\n})\nexport class SliderComponent {\n  // FontAwesome icons\n  public arrowLeft = faArrowLeft;\n  public arrowRight = faArrowRight;\n\n  constructor(private pageChangerService: PageChangerService) { }\n\n  public isAvailableNext(): boolean {\n    return this.pageChangerService.isAvailableNext();\n  }\n\n  public isAvailablePrevious(): boolean {\n    return this.pageChangerService.isAvailablePrevious();\n  }\n\n  public nextPage(): void {\n    this.pageChangerService.nextPage();\n  }\n\n  public previousPage(): void {\n    this.pageChangerService.previousPage();\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '/src/styles.scss';\r\n\r\n.slide-buttons-container {\r\n    width: 60px;\r\n    height: 35px;\r\n    \r\n    margin: 0 auto;\r\n    display: flex;\r\n    justify-content: space-evenly;\r\n    align-items: center;\r\n    background: var(--slider-background);\r\n    color: var(--slider-font-color-idle);\r\n    border-radius: 20px;    \r\n    box-shadow: 0px 0px 30px -14px var(--background-color);\r\n\r\n    .slide-button {\r\n        cursor: pointer;\r\n        transition: transform 0.1s;\r\n\r\n        &:hover {\r\n            transform: scale(1.1);\r\n            color: var(--slider-font-color);\r\n        }\r\n    }\r\n}",
                    "styleUrl": "./slider.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "pageChangerService",
                        "type": "PageChangerService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "pageChangerService",
                        "type": "PageChangerService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<div class=\"slide-buttons-container\">\n    <span *ngIf=\"isAvailablePrevious()\" (click)=\"previousPage()\" class=\"slide-button\">\n        <fa-icon [icon]=\"arrowLeft\"></fa-icon>\n    </span>\n    <span *ngIf=\"isAvailableNext()\" (click)=\"nextPage()\" class=\"slide-button\">\n        <fa-icon [icon]=\"arrowRight\"></fa-icon>\n    </span>\n</div>\n"
        },
        {
            "name": "TodoCardComponent",
            "id": "component-TodoCardComponent-e76336bbd0d56238be24e47a7274fa2cefcce1ed484fc94855b8e2469fc8cdec2ad604ee79dbbd6fd0cb894def8ecd9dc4151791b667e76a02e514837e6c7e33",
            "file": "src/app/components/todo-card/todo-card.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-todo-card",
            "styleUrls": [
                "./todo-card.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./todo-card.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "todo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "Todo",
                    "decorators": []
                },
                {
                    "name": "todoIndex",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "getColor",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\nimport { Todo } from '../todo/models';\n\n@Component({\n  selector: 'app-todo-card',\n  templateUrl: './todo-card.component.html',\n  styleUrls: ['./todo-card.component.scss']\n})\nexport class TodoCardComponent implements OnInit {\n  @Input() todo!: Todo;\n  @Input() todoIndex!: number;\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n  public getColor(): string {\n    return this.todo?.color || '';\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import 'src/styles';\r\n$card-height: 100px;\r\n$card-width: 350px;\r\n$card-spacing: 20px;\r\n\r\n.card {\r\n    display: flex;\r\n    align-items: center;\r\n    border-radius: 10px;\r\n    height: $card-height;\r\n    margin: $card-spacing;\r\n    font-family: $fira-sans;\r\n    box-shadow: 0px 3px 10px -5px rgba(0,0,0,0.3);\r\n    background-color: var(--foreground-color);\r\n    overflow: hidden;\r\n\r\n    .color-border {\r\n        height: 100%;\r\n        width: 6px;\r\n    }\r\n\r\n    .card-details {\r\n        padding-right: 20px;\r\n\r\n        .title {\r\n            font-weight: 600;\r\n            margin-bottom: 5px;\r\n        }\r\n\r\n        .description {\r\n            font-size: 14px;\r\n            color: $gray;\r\n        }\r\n    }\r\n\r\n    &.add-card {\r\n        display: flex;\r\n        justify-content: center;\r\n        align-items: center;\r\n        font-size: 50px;\r\n        background-color: gray;\r\n        cursor: pointer;\r\n        transition: background-color 0.3s;\r\n\r\n        &:hover {\r\n            background-color: rgb(139, 139, 139);\r\n        }\r\n    }\r\n\r\n    &.completed {\r\n        .title {\r\n            color: var(--disabled-color);\r\n            text-decoration: line-through;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n@media (max-width: $mobile) {\r\n    .card {\r\n        margin: $card-spacing 0;\r\n    }\r\n} ",
                    "styleUrl": "./todo-card.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 11
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"card\" [ngClass]=\"{'completed' : todo?.completed}\">\n    <span class=\"color-border gradients\" [ngClass]=\"getColor()\"></span>\n    <app-checkbox [(isCompleted)]=\"todo.completed\" [color]=\"todo?.color\"></app-checkbox>\n    <div class=\"card-details\">\n        <div class=\"title\">{{ todo?.title }}</div>\n        <div class=\"description\">{{ todo?.description }}</div>\n        <span class=\"icon\"></span>\n    </div>\n</div>\n"
        },
        {
            "name": "TodoComponent",
            "id": "component-TodoComponent-66d3daca52d9aad4a3827029f812146866bbcd0481f179cfe87c140a3b1991dd27744139a85f4b645bbf105512a0f62b854a9309b8a865708477b9488299fafa",
            "file": "src/app/components/todo/todo.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-todo",
            "styleUrls": [
                "./todo.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./todo.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "groups",
                    "defaultValue": "[\n    {\n      title: 'Today', \n      filter: (todo: Todo) => {\n        const today = new Date();\n        today.setHours(0, 0, 0, 0);\n        return todo.deadline === today;\n      },\n      todos: [\n        new Todo('Debug the app', 'Try to find all the bugs! Regression needed.', new Date(), 'gradient-1'),\n        new Todo('Order chinesse food', 'Sushikage - 0791-897-15x. 10x Maki Avocado, 10x California Rolls, 1x Miso Ramen + Nigiri', new Date(), 'gradient-2'),\n        {...new Todo('Send files to Dan', 'Excel documents with statistics and the pdf file', new Date(), 'gradient-1'), completed: true },\n        {...new Todo('Call grandma', 'It\\'s family time yo know', new Date(), 'gradient-3'), completed: true }\n      ]\n    },\n    {\n      title: 'Tomorrow', \n      filter: (todo: Todo) => {\n        const tomorrow = new Date();\n        tomorrow.setDate(tomorrow.getDate() + 1);\n        tomorrow.setHours(0, 0, 0, 0);\n        return todo.deadline === tomorrow;\n      },\n      todos: [\n        new Todo('Feed the cat', 'You don\\'t want Fritzy boi to be grumpy.', new Date(), 'gradient-3'),\n        {...new Todo('Watch a movie', 'Watchlist: Forest Gump, The Godfather, Pulp Fiction', new Date(), 'gradient-5'), completed: true},\n      ]\n    },\n    {\n      title: 'Next 5 days', \n      filter: (todo: Todo) => {\n        const tomorrow = new Date();\n        tomorrow.setDate(tomorrow.getDate() + 1);\n        tomorrow.setHours(0, 0, 0, 0);\n        return todo.deadline === tomorrow;\n      },\n      todos: [\n        new Todo('Watch React tutorial', 'The advance guide regarding React Hooks and Redux', new Date(), 'gradient-4'),\n      ]\n    },\n    {\n      title: 'Later', \n      filter: (todo: Todo) => {\n        const tomorrow = new Date();\n        tomorrow.setDate(tomorrow.getDate() + 1);\n        tomorrow.setHours(0, 0, 0, 0);\n        return todo.deadline === tomorrow;\n      },\n      todos: [\n        new Todo('Watch a movie', 'Watchlist: Forest Gump, The Godfather, Pulp Fiction', new Date(), 'gradient-2'),\n        new Todo('Finish Angular app', 'Don\\'t forget to add that shiny animation!!!', new Date(), 'gradient-3'),\n      ]\n    }\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TodoGroup[]",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "getGroups",
                    "args": [],
                    "optional": false,
                    "returnType": "TodoGroup[]",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "isGroupDisplayed",
                    "args": [
                        {
                            "name": "group",
                            "type": "TodoGroup",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "group",
                            "type": "TodoGroup",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { Todo, TodoGroup } from './models';\n\n@Component({\n  selector: 'app-todo',\n  templateUrl: './todo.component.html',\n  styleUrls: ['./todo.component.scss']\n})\nexport class TodoComponent {\n  public groups: TodoGroup[] = [\n    {\n      title: 'Today', \n      filter: (todo: Todo) => {\n        const today = new Date();\n        today.setHours(0, 0, 0, 0);\n        return todo.deadline === today;\n      },\n      todos: [\n        new Todo('Debug the app', 'Try to find all the bugs! Regression needed.', new Date(), 'gradient-1'),\n        new Todo('Order chinesse food', 'Sushikage - 0791-897-15x. 10x Maki Avocado, 10x California Rolls, 1x Miso Ramen + Nigiri', new Date(), 'gradient-2'),\n        {...new Todo('Send files to Dan', 'Excel documents with statistics and the pdf file', new Date(), 'gradient-1'), completed: true },\n        {...new Todo('Call grandma', 'It\\'s family time yo know', new Date(), 'gradient-3'), completed: true }\n      ]\n    },\n    {\n      title: 'Tomorrow', \n      filter: (todo: Todo) => {\n        const tomorrow = new Date();\n        tomorrow.setDate(tomorrow.getDate() + 1);\n        tomorrow.setHours(0, 0, 0, 0);\n        return todo.deadline === tomorrow;\n      },\n      todos: [\n        new Todo('Feed the cat', 'You don\\'t want Fritzy boi to be grumpy.', new Date(), 'gradient-3'),\n        {...new Todo('Watch a movie', 'Watchlist: Forest Gump, The Godfather, Pulp Fiction', new Date(), 'gradient-5'), completed: true},\n      ]\n    },\n    {\n      title: 'Next 5 days', \n      filter: (todo: Todo) => {\n        const tomorrow = new Date();\n        tomorrow.setDate(tomorrow.getDate() + 1);\n        tomorrow.setHours(0, 0, 0, 0);\n        return todo.deadline === tomorrow;\n      },\n      todos: [\n        new Todo('Watch React tutorial', 'The advance guide regarding React Hooks and Redux', new Date(), 'gradient-4'),\n      ]\n    },\n    {\n      title: 'Later', \n      filter: (todo: Todo) => {\n        const tomorrow = new Date();\n        tomorrow.setDate(tomorrow.getDate() + 1);\n        tomorrow.setHours(0, 0, 0, 0);\n        return todo.deadline === tomorrow;\n      },\n      todos: [\n        new Todo('Watch a movie', 'Watchlist: Forest Gump, The Godfather, Pulp Fiction', new Date(), 'gradient-2'),\n        new Todo('Finish Angular app', 'Don\\'t forget to add that shiny animation!!!', new Date(), 'gradient-3'),\n      ]\n    }\n  ]\n\n  constructor() { }\n\n  public getGroups(): TodoGroup[] {\n    return this.groups.filter(group => group.todos.length > 0);\n  }\n\n  public isGroupDisplayed(group: TodoGroup): boolean {\n    return group.todos.length > 0;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import 'src/styles';\r\n$card-spacing: 25px;\r\n$header-height: 70px;\r\n\r\n:host {\r\n    height: 100vh;\r\n    display: block;\r\n    position: relative;\r\n    font-family: 'Fira Sans', sans-serif;\r\n    background-color: var(--background-color);\r\n    color: var(--font-color);\r\n\r\n    .todo-header {\r\n        height: $header-height;\r\n        width: 100vw;\r\n        display: flex;\r\n        align-items: center;\r\n        box-sizing: border-box;\r\n        padding: 25px 0 10px 30px;\r\n\r\n        .todo-title {\r\n            font-size: 32px;\r\n            font-weight: 600;\r\n            margin-right: 15px;\r\n        }\r\n    }\r\n\r\n    .container {\r\n        display: flex;\r\n        height: calc(100vh - #{$header-height});\r\n        position: relative;\r\n\r\n        .bottom-fade {\r\n            position: absolute;\r\n            height: 100px;\r\n            width: 100%;\r\n            bottom: 0;\r\n            left: 0;\r\n            background: linear-gradient(0deg, var(--background-color) 20%, rgba(var(--background-color-rgb), 0));\r\n        }\r\n\r\n        .group-container {\r\n            flex: 1 1 auto;\r\n            height: 100%;\r\n            display: flex;\r\n            flex-wrap: wrap;\r\n            align-content: flex-start;\r\n            box-sizing: border-box;\r\n            overflow: auto;\r\n            z-index: 1;\r\n            padding: $card-spacing;\r\n            padding-bottom: 50px;\r\n\r\n            .todo-group {\r\n                width: 50%;\r\n                margin-bottom: 20px;\r\n            }\r\n        }\r\n\r\n        .add-container {\r\n            flex: 1 1 auto;\r\n            height: 100%;\r\n            border-radius: 20px 0 0 0;\r\n            background: var(--foreground-color);\r\n            box-shadow: -15px 0 30px -30px black;\r\n        }        \r\n\r\n        @media (max-width: $tablet) {\r\n            .group-container {\r\n                // width: 50%;\r\n\r\n                .todo-group {\r\n                    width: 100%;\r\n                }\r\n            }\r\n\r\n            .add-container, .bottom-fade {\r\n                // width: 50%;\r\n            }\r\n        }\r\n\r\n        @media (max-width: $mobile) {\r\n            .group-container, .bottom-fade {\r\n                width: 100%;\r\n            }\r\n            .add-container {\r\n                display: none;\r\n            }\r\n        } \r\n    }\r\n}",
                    "styleUrl": "./todo.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 63
            },
            "templateData": "<div class=\"todo-header\">\n    <span class=\"todo-title\">\n        1. Todo List        \n    </span>\n    <app-toggle-theme-button></app-toggle-theme-button>\n</div>\n<div class=\"container\">\n    <div class=\"group-container\">    \n        <app-todo-group \n            *ngFor=\"let group of getGroups()\"\n            [title]=\"group.title\"\n            [todos]=\"group.todos\"\n            class=\"todo-group\"\n        ></app-todo-group>\n        <div class=\"bottom-fade\"></div>\n    </div>\n</div>"
        },
        {
            "name": "TodoGroupComponent",
            "id": "component-TodoGroupComponent-4cf9c92f0d00567ffeb474e871c361ca448f8568267db6c9439d4d5203d6e4386ec7400ad034434af9abe637d7c9cfe6fc688e76343cefb264a52ca6460dcaab",
            "file": "src/app/components/todo-group/todo-group.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-todo-group",
            "styleUrls": [
                "./todo-group.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./todo-group.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "title",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "todos",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "Todo[]",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "isListToggled",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "maxTodosDisplayed",
                    "defaultValue": "3",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "getTasksCount",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "getTodos",
                    "args": [],
                    "optional": false,
                    "returnType": "Todo[]",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "getToggleText",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "isListLong",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "toggleList",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { Todo } from '../todo/models';\n\n@Component({\n  selector: 'app-todo-group',\n  templateUrl: './todo-group.component.html',\n  styleUrls: ['./todo-group.component.scss']\n})\nexport class TodoGroupComponent {\n  @Input() title: string = '';\n  @Input() todos: Todo[] = [];\n  public isListToggled = true;\n\n  private maxTodosDisplayed = 3;\n\n\n  public getTasksCount(): string {\n    const notCompletedTodos = this.todos.filter((todo) => !todo.completed);\n    if(notCompletedTodos.length === 0) {\n      return 'No tasks';\n    }\n    return notCompletedTodos.length === 1 ? '1 task' : `${notCompletedTodos.length} tasks`;\n  }\n\n  public getToggleText(): string {\n    return this.isListToggled ? 'Show more' : 'Show less';\n  }\n\n  public toggleList(): void {\n    this.isListToggled = !this.isListToggled;\n  }\n\n  public isListLong(): boolean {\n    return this.todos.length > this.maxTodosDisplayed;\n  }\n\n  public getTodos(): Todo[] {\n    if(!this.isListToggled || !this.isListLong()) {\n      return this.todos;\n    }\n    return this.todos.slice(0, this.maxTodosDisplayed);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import 'src/styles';\r\n\r\n.group-header {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: baseline;\r\n    font-family: $fira-sans;\r\n\r\n    .group-title {\r\n        margin-left: 10px;\r\n        font-size: 20px;\r\n        font-weight: 600;\r\n    \r\n        .tasks-count {\r\n            margin-left: 6px;\r\n            font-size: 14px;\r\n            font-weight: 400;\r\n            color: $gray;\r\n        }\r\n    }\r\n\r\n    .toggle {\r\n        margin-right: 20px;\r\n        font-size: 14px;\r\n        color: $primary-blue;\r\n        cursor: pointer;\r\n\r\n        &:hover {\r\n            color: $secondary-blue;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n@media (max-width: $mobile) {\r\n    .group-header {\r\n        .group-title {\r\n            margin-left: 0;\r\n        }\r\n    }\r\n} ",
                    "styleUrl": "./todo-group.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div class=\"group-header\">\n    <span class=\"group-title\">{{ title }} \n        <span class=\"tasks-count\">{{ getTasksCount() }}</span>\n    </span>\n    <span *ngIf=\"isListLong()\" (click)=\"toggleList()\" class=\"toggle\">{{ getToggleText() }}</span>\n</div>\n<app-todo-card *ngFor=\"let todo of getTodos()\" [todo]=\"todo\"></app-todo-card>"
        },
        {
            "name": "ToggleThemeButtonComponent",
            "id": "component-ToggleThemeButtonComponent-6dd17569ed26435bebf6639cf3866fce60dfe44636a7daeede1cfea63a667dab2d2255cd657486006e4b68d02854f37dd9ce523280fb13ceb14ca4bd5a1276aa",
            "file": "src/app/components/toggle-theme-button/toggle-theme-button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-toggle-theme-button",
            "styleUrls": [
                "./toggle-theme-button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./toggle-theme-button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "currentThemeIcon",
                    "defaultValue": "faSun",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IconDefinition",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "iconClass",
                    "defaultValue": "'sun'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "isDestroyed$",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<void>",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "subscribeToTheme",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "toggleMode",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ThemeService } from 'src/app/services';\nimport { faSun, faMoon } from '@fortawesome/free-solid-svg-icons';\nimport { IconDefinition } from '@fortawesome/fontawesome-common-types'\nimport { Theme } from 'src/app/services/enums';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\n@Component({\n  selector: 'app-toggle-theme-button',\n  templateUrl: './toggle-theme-button.component.html',\n  styleUrls: ['./toggle-theme-button.component.scss']\n})\nexport class ToggleThemeButtonComponent implements OnInit, OnDestroy {\n  public currentThemeIcon: IconDefinition = faSun;\n  public iconClass = 'sun';\n\n  private isDestroyed$: Subject<void> = new Subject();\n\n  constructor(private themeService: ThemeService) { }\n\n  public ngOnInit(): void {\n    this.subscribeToTheme();\n  }\n  \n  public toggleMode(): void {\n    this.themeService.toggleTheme();\n  }\n\n  private subscribeToTheme(): void {\n    this.themeService.currentTheme$.pipe(\n      takeUntil(this.isDestroyed$)\n      ).subscribe((currentTheme) => {\n      this.currentThemeIcon = currentTheme === Theme.Light ? faSun : faMoon;\n      this.iconClass = currentTheme === Theme.Light ? 'sun' : 'moon';\n    });\n  }\n\n  public ngOnDestroy(): void {\n    this.isDestroyed$.next();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".toggle-container {\r\n    width: 30px;\r\n    height: 30px;\r\n    display: inline-flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    background-color: var(--foreground-color);\r\n    border-radius: 10px;\r\n    font-size: 20px;\r\n    color: var(--font-color);\r\n    box-shadow: 0px 3px 10px -5px rgba(0,0,0,0.3);\r\n    cursor: pointer;\r\n\r\n    fa-icon {\r\n        display: flex;\r\n\r\n        &.sun {\r\n            color: rgb(255, 133, 46);\r\n        }\r\n    }\r\n}",
                    "styleUrl": "./toggle-theme-button.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "themeService",
                        "type": "ThemeService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "themeService",
                        "type": "ThemeService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<span class=\"toggle-container\" (click)=\"toggleMode()\">\n    <fa-icon [icon]=\"currentThemeIcon\" [ngClass]=\"iconClass\"></fa-icon>\n</span>\n"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "id": "module-AppModule-e81d78e4edfb678e3232e78ff651dda8a6c7dedf1a213f570917b213be9e8ce7a0ffc49af38b3780fdcbe5809a745ece6503d3797b74c0d3e300560baa93a82c",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { ComponentsModule } from './components';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n  ],\n  imports: [\n    BrowserModule,\n    BrowserAnimationsModule,\n    AppRoutingModule,\n    ComponentsModule\n  ], \n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "id": "module-AppRoutingModule-3f921850a2475eb8f47040333a11a78d8668ce8e3f9d3708482a1452a66b92ea2e3f490ba91e0b1bdd2303fc47f0bbda4a7762f678a88ef18a90ed05e4ea3cc8",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\n\nconst routes: Routes = [\n  {\n    path: '',\n    pathMatch: 'full',\n    loadChildren: () => \"import('./pages/home/home.module').then(m => m.HomeModule)\"\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ComponentsModule",
            "id": "module-ComponentsModule-94da81abb11e79297eee847d269fe21b08d0e65f45da125e7fd6e1eebe18721691122568f0b21487b3af27f5816498716a1816fe5d2b3d1995895af0b869ac76",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/components/components.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from \"@angular/common\";\r\nimport { NgModule } from \"@angular/core\";\r\nimport { BrowserModule } from \"@angular/platform-browser\";\r\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\r\nimport { GameService } from \"../services\";\r\nimport { GameComponent } from \"./game\";\r\nimport { GameSectionComponent } from \"./game-section\";\r\nimport { LogoComponent } from \"./logo\";\r\nimport { PresentationComponent } from \"./presentation\";\r\nimport { DotsComponent } from './dots/dots.component';\r\nimport { TodoComponent } from './todo/todo.component';\r\nimport { TodoGroupComponent } from './todo-group/todo-group.component';\r\nimport { TodoCardComponent } from './todo-card/todo-card.component';\r\nimport { AnimationDemoComponent } from './animation-demo/animation-demo.component';\r\nimport { SliderComponent } from './slider/slider.component';\r\nimport { FontAwesomeModule } from \"@fortawesome/angular-fontawesome\";\r\nimport { ToggleThemeButtonComponent } from './toggle-theme-button/toggle-theme-button.component';\r\nimport { FormsModule } from \"@angular/forms\";\nimport { CheckboxComponent } from './checkbox/checkbox.component';\r\n\r\n@NgModule({\r\n    declarations: [\r\n      PresentationComponent,\r\n      GameSectionComponent,\r\n      GameComponent,\r\n      LogoComponent,\r\n      DotsComponent,\r\n      TodoComponent,\r\n      TodoGroupComponent,\r\n      TodoCardComponent,\r\n      AnimationDemoComponent,\r\n      SliderComponent,\r\n      ToggleThemeButtonComponent,\r\n      CheckboxComponent,\r\n    ],\r\n    imports: [\r\n      CommonModule,\r\n      FontAwesomeModule,\r\n      FormsModule\r\n    ],\r\n    exports: [\r\n      PresentationComponent,\r\n      GameSectionComponent,\r\n      TodoComponent,\r\n      AnimationDemoComponent,\r\n      SliderComponent\r\n    ],\r\n    providers: [GameService]\r\n  })\r\n  export class ComponentsModule { }",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "GameService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AnimationDemoComponent"
                        },
                        {
                            "name": "CheckboxComponent"
                        },
                        {
                            "name": "DotsComponent"
                        },
                        {
                            "name": "GameComponent"
                        },
                        {
                            "name": "GameSectionComponent"
                        },
                        {
                            "name": "LogoComponent"
                        },
                        {
                            "name": "PresentationComponent"
                        },
                        {
                            "name": "SliderComponent"
                        },
                        {
                            "name": "TodoCardComponent"
                        },
                        {
                            "name": "TodoComponent"
                        },
                        {
                            "name": "TodoGroupComponent"
                        },
                        {
                            "name": "ToggleThemeButtonComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "AnimationDemoComponent"
                        },
                        {
                            "name": "GameSectionComponent"
                        },
                        {
                            "name": "PresentationComponent"
                        },
                        {
                            "name": "SliderComponent"
                        },
                        {
                            "name": "TodoComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "HomeModule",
            "id": "module-HomeModule-61d27e54f9b1d90fa2d9213f7c764a631a9d84efc05fb4c39a5892b60ce2ad3f284da1815d515dfdce29f0f23cfaa889e440c495aefa3c648110e2a4a019fa66",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/pages/home/home.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HomeComponent } from './home.component';\nimport { HomeRoutingModule } from './home-routing.module';\nimport { ComponentsModule } from 'src/app/components';\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\n\n\n@NgModule({\n  declarations: [\n    HomeComponent,\n  ],\n  imports: [\n    CommonModule,\n    HomeRoutingModule,\n    ComponentsModule,\n    FontAwesomeModule\n  ],\n})\nexport class HomeModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "HomeComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "HomeRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "HomeRoutingModule",
            "id": "module-HomeRoutingModule-522b6d7d9dff900454eee52ac6962de6a643b5621a73e0601d98a91b22bcd3b8f04834e97cd5799b577a2144f9ed56b0e00599d500c7943a958a953e1dd319b0",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/pages/home/home-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { HomeComponent } from './home.component';\r\n\r\nconst routes: Routes = [\r\n    {\r\n        path: '',\r\n        component: HomeComponent\r\n    }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class HomeRoutingModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "Custom",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Checkbox.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Checkbox.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/ToDo-Group.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: false\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: true\n}"
            },
            {
                "name": "Gradient1",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Todo-Card.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Gradient2",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Todo-Card.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Checkbox.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<CheckboxComponent>",
                "defaultValue": "(args: CheckboxComponent) => ({\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/ToDo-Group.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<TodoGroupComponent>",
                "defaultValue": "(args: TodoGroupComponent) => ({\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Todo-Card.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<TodoCardComponent>",
                "defaultValue": "(args: TodoCardComponent) => ({\r\n  props: args,\r\n})"
            }
        ],
        "functions": [],
        "typealiases": [],
        "enumerations": [
            {
                "name": "GameMode",
                "childs": [
                    {
                        "name": "NotSelected",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "PlayerVsPlayer",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "PlayerVsBot",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/components/game/enums/game-mode.enum.ts"
            },
            {
                "name": "GameStatus",
                "childs": [
                    {
                        "name": "NotStarted",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "Ongoing",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "Draw",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "Player1Won",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "Player2Won",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/components/game/enums/game-status.enum.ts"
            },
            {
                "name": "GameTile",
                "childs": [
                    {
                        "name": "Player1",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "Player2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "Empty",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/components/game/enums/game-tile.enum.ts"
            },
            {
                "name": "PlayerStyleClass",
                "childs": [
                    {
                        "name": "Player1",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "player1"
                    },
                    {
                        "name": "Player2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "player2"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/components/game/enums/player-style-class.enum.ts"
            },
            {
                "name": "Theme",
                "childs": [
                    {
                        "name": "Dark",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "dark"
                    },
                    {
                        "name": "Light",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "light"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/services/enums/theme.enum.ts"
            }
        ],
        "groupedVariables": {
            "src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type"
                }
            ],
            "src/stories/Checkbox.stories.ts": [
                {
                    "name": "Custom",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Checkbox.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Checkbox.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Checkbox.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<CheckboxComponent>",
                    "defaultValue": "(args: CheckboxComponent) => ({\r\n  props: args,\r\n})"
                }
            ],
            "src/stories/ToDo-Group.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/ToDo-Group.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/ToDo-Group.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<TodoGroupComponent>",
                    "defaultValue": "(args: TodoGroupComponent) => ({\r\n  props: args,\r\n})"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: false\n}"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: true\n}"
                }
            ],
            "src/stories/Todo-Card.stories.ts": [
                {
                    "name": "Gradient1",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Todo-Card.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Gradient2",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Todo-Card.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Todo-Card.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<TodoCardComponent>",
                    "defaultValue": "(args: TodoCardComponent) => ({\r\n  props: args,\r\n})"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {
            "src/app/components/game/enums/game-mode.enum.ts": [
                {
                    "name": "GameMode",
                    "childs": [
                        {
                            "name": "NotSelected",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "PlayerVsPlayer",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "PlayerVsBot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/components/game/enums/game-mode.enum.ts"
                }
            ],
            "src/app/components/game/enums/game-status.enum.ts": [
                {
                    "name": "GameStatus",
                    "childs": [
                        {
                            "name": "NotStarted",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "Ongoing",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "Draw",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "Player1Won",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "Player2Won",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/components/game/enums/game-status.enum.ts"
                }
            ],
            "src/app/components/game/enums/game-tile.enum.ts": [
                {
                    "name": "GameTile",
                    "childs": [
                        {
                            "name": "Player1",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "Player2",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "Empty",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/components/game/enums/game-tile.enum.ts"
                }
            ],
            "src/app/components/game/enums/player-style-class.enum.ts": [
                {
                    "name": "PlayerStyleClass",
                    "childs": [
                        {
                            "name": "Player1",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "player1"
                        },
                        {
                            "name": "Player2",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "player2"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/components/game/enums/player-style-class.enum.ts"
                }
            ],
            "src/app/services/enums/theme.enum.ts": [
                {
                    "name": "Theme",
                    "childs": [
                        {
                            "name": "Dark",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "dark"
                        },
                        {
                            "name": "Light",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "light"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/services/enums/theme.enum.ts"
                }
            ]
        },
        "groupedTypeAliases": {}
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [
                    {
                        "path": "",
                        "pathMatch": "full",
                        "loadChildren": "./pages/home/home.module#HomeModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [
                                    {
                                        "name": "routes",
                                        "filename": "src/app/pages/home/home-routing.module.ts",
                                        "module": "HomeRoutingModule",
                                        "children": [
                                            {
                                                "path": "",
                                                "component": "HomeComponent"
                                            }
                                        ],
                                        "kind": "module"
                                    }
                                ],
                                "module": "HomeModule"
                            }
                        ]
                    }
                ],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/components/animation-demo/animation-demo.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AnimationDemoComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/components/checkbox/checkbox.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CheckboxComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/components/dots/dots.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DotsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/components/game-section/game-section.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "GameSectionComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/components/game/game.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "GameComponent",
                "coveragePercent": 0,
                "coverageCount": "0/37",
                "status": "low"
            },
            {
                "filePath": "src/app/components/logo/logo.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LogoComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/components/presentation/presentation.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PresentationComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/slider/slider.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SliderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/components/todo-card/todo-card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TodoCardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/components/todo-group/todo-group.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TodoGroupComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/components/todo/models/todo-group.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TodoGroup",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/components/todo/models/todo.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Todo",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/components/todo/todo.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TodoComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/components/toggle-theme-button/toggle-theme-button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ToggleThemeButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/home/home.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HomeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/services/game.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "GameService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/services/page-changer.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "PageChangerService",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/services/theme.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ThemeService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Checkbox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Custom",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Checkbox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Checkbox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/ToDo-Group.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/ToDo-Group.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Todo-Card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Gradient1",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Todo-Card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Gradient2",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Todo-Card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}